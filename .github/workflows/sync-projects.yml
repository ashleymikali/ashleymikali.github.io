name: Sync Projects from Other Repositories

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  sync_files:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout Portfolio Repository
        uses: actions/checkout@v3
        with:
          repository: ashleymikali/ashleymikali.github.io
          
      - name: Checkout Sync Branch & Pull Latest Changes
        run: |
          git fetch origin
          git checkout sync-branch || git checkout -b sync-branch
          git pull origin sync-branch
          
      - name: Checkout Spending Habits Project Repository
        uses: actions/checkout@v3
        with:
          repository: ashleymikali/spending-behavior-model
          path: projects/spending-behavior-model
          
      - name: List Files in Portfolio Repository
        run: ls -R
        
      - name: Set up GitHub Token
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.PORTFOLIO_TOKEN }}@github.com/ashleymikali/ashleymikali.github.io.git
          
      - name: Remove any .git directories to avoid conflicts
        run: find . -path "*/spending-behavior-model/.git" -type d -exec rm -rf {} +

      - name: List Files in Projects Folder for Debugging
        run: |
          ls -R projects/spending-behavior-model
          
      - name: Check for Untracked Files
        run: |
          git status --porcelain | grep '??' || echo "No untracked files"

      - name: Check for Changes using git status
        id: status_check
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changed=true" >> $GITHUB_ENV
            echo "Changes detected in files."
          else
            echo "changed=false" >> $GITHUB_ENV
          echo "No changes detected in files."
          fi

      - name: Run only if changes were found
        if: env.changed == 'true'
        run: echo "Do something here because files changed"

      - name: Check for Content Differences using git diff
        run: |
          if git diff --quiet; then
            echo "No content changes detected."
          else
            echo "Content changes detected."
          fi

      - name: Commit and Push Changes
        env:
          changed: ${{ env.changed }}
        run: |
          if [[ "$changed" != "true" ]] && git diff --quiet; then
            echo "No changes detected, skipping commit."
          else
            echo "Changes detected, committing and pushing."
            git add .
            git commit -m "Synced project files" || echo "Nothing to commit"
            git push --set-upstream origin sync-branch